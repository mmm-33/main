import{j as h}from"./index-BosoN4sL.js";import{E as p}from"./stripe.esm-D0H7Brqv.js";import{s as a}from"./supabase-CHObDSf6.js";const m=()=>(console.error("Stripe publishable key is missing"),Promise.reject(new Error("Stripe publishable key is missing"))),E={async createCheckoutSession({priceId:r,successUrl:e,cancelUrl:t,clientReferenceId:o,customerEmail:c,metadata:n={},quantity:s=1}){try{const{data:i,error:u}=await a.functions.invoke("create-checkout-session",{body:{priceId:r,successUrl:e,cancelUrl:t,clientReferenceId:o,customerEmail:c,metadata:n,quantity:s,mode:"payment"}});if(u)throw new Error(`Error creating checkout session: ${u.message}`);return i}catch(i){throw console.error("Error creating checkout session:",i),i}},async createSubscriptionSession({priceId:r,successUrl:e,cancelUrl:t,customerEmail:o,metadata:c={},trialPeriodDays:n}){try{const{data:s,error:i}=await a.functions.invoke("create-checkout-session",{body:{priceId:r,successUrl:e,cancelUrl:t,customerEmail:o,metadata:c,mode:"subscription",trialPeriodDays:n}});if(i)throw new Error(`Error creating subscription session: ${i.message}`);return s}catch(s){throw console.error("Error creating subscription session:",s),s}},async createPaymentIntent({amount:r,currency:e,metadata:t={},receiptEmail:o,description:c}){try{const{data:n,error:s}=await a.functions.invoke("create-payment-intent",{body:{amount:r,currency:e,metadata:t,receiptEmail:o,description:c}});if(s)throw new Error(`Error creating payment intent: ${s.message}`);return n}catch(n){throw console.error("Error creating payment intent:",n),n}},async getCustomerPortalUrl(r){try{const{data:e,error:t}=await a.functions.invoke("create-customer-portal",{body:{returnUrl:r}});if(t)throw new Error(`Error creating customer portal: ${t.message}`);return e}catch(e){throw console.error("Error creating customer portal:",e),e}},async getUserSubscription(){try{const{data:r,error:e}=await a.auth.getUser();if(e||!r.user)throw new Error("User not authenticated");const{data:t,error:o}=await a.from("stripe_user_subscriptions").select("*").single();if(o&&o.code!=="PGRST116")throw new Error(`Error fetching subscription: ${o.message}`);return t||null}catch(r){throw console.error("Error fetching user subscription:",r),r}},async getUserOrders(){try{const{data:r,error:e}=await a.auth.getUser();if(e||!r.user)throw new Error("User not authenticated");const{data:t,error:o}=await a.from("stripe_user_orders").select("*").order("order_date",{ascending:!1});if(o)throw new Error(`Error fetching orders: ${o.message}`);return t||[]}catch(r){throw console.error("Error fetching user orders:",r),r}}},l=({children:r})=>{const e=m();return h.jsx(p,{stripe:e,children:r})};export{l as S,E as s};
